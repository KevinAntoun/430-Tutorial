pipeline {
  agent any

  triggers {
    // poll every 2 minutes
    pollSCM('H/2 * * * *')
  }

  environment {
    NS            = 'default'
    APP           = 'mydjangoapp'
    DEPLOY        = 'django-deployment'   // metadata.name in deployment.yaml
    CTR           = 'web'                 // containers[].name in deployment.yaml
    DOCKER_CTX    = 'ps2'                 // path containing Dockerfile
    MANIFEST_DIR  = 'ps2'                 // path containing deployment.yaml/service.yaml

    // Persist cluster config/state across stages in this workspace
    MINIKUBE_HOME = "${WORKSPACE}/.minikube"
    KUBECONFIG    = "${WORKSPACE}/.kube/config"

    // Dedicated network for Minikube (avoid clashes with default 192.168.49.0/24)
    MK_DOCKER_NET = 'minikube-net'
    MK_SUBNET     = '10.123.0.0/16'
  }

  options {
    timestamps()
  }

  stages {
    stage('Checkout') {
      steps {
        cleanWs()
        git branch: 'main', url: 'https://github.com/KevinAntoun/430-Tutorial'
      }
    }

    stage('Install CLIs (once)') {
      steps {
        sh '''
          set -euo pipefail

          # --- Minikube ---
          if ! command -v minikube >/dev/null 2>&1; then
            curl -fsSL https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 -o /usr/local/bin/minikube
            chmod +x /usr/local/bin/minikube
          fi
          minikube version || true

          # --- kubectl ---
          if ! command -v kubectl >/dev/null 2>&1; then
            KVER="$(curl -fsSL https://dl.k8s.io/release/stable.txt)"
            curl -fsSL "https://dl.k8s.io/release/${KVER}/bin/linux/amd64/kubectl" -o /usr/local/bin/kubectl
            chmod +x /usr/local/bin/kubectl
          fi

          # ensure dirs for kube/minikube live under workspace
          mkdir -p "${MINIKUBE_HOME}" "$(dirname "${KUBECONFIG}")"
        '''
      }
    }

    stage('Prepare dedicated Docker network for Minikube') {
      steps {
        sh '''
          set -euo pipefail

          # 1) Fail fast if MK_SUBNET overlaps any existing Docker network
          python3 - <<'PY'
import ipaddress, json, subprocess, sys
mk = ipaddress.ip_network("${MK_SUBNET}", strict=False)
inspect = subprocess.check_output(
    "docker network ls -q | xargs -r docker network inspect", shell=True, text=True
)
nets = json.loads(inspect) if inspect.strip() else []
for n in nets:
    cfgs = (n.get("IPAM",{}) or {}).get("Config",[]) or []
    for c in cfgs:
        s = c.get("Subnet")
        if not s: 
            continue
        try:
            nw = ipaddress.ip_network(s, strict=False)
        except ValueError:
            continue
        if mk.overlaps(nw) and n.get("Name") != "${MK_DOCKER_NET}":
            print(f"ERROR: ${MK_SUBNET} overlaps with existing network '{n.get('Name')}' ({nw})")
            sys.exit(1)
print("No overlaps detected for ${MK_SUBNET}")
PY

          # 2) Create the dedicated network if it doesn't exist
          if ! docker network inspect "${MK_DOCKER_NET}" >/dev/null 2>&1; then
            docker network create \
              --driver=bridge \
              --subnet="${MK_SUBNET}" \
              "${MK_DOCKER_NET}"
          fi

          echo "Using Docker network: ${MK_DOCKER_NET} (${MK_SUBNET})"
          docker network inspect "${MK_DOCKER_NET}" -f '{{.Name}} {{range .IPAM.Config}}{{.Subnet}}{{end}}'
        '''
      }
    }

    stage('Start Minikube (once per workspace)') {
      steps {
        sh '''
          set -euo pipefail

          # Clean any old/broken profile to avoid collisions
          minikube -p minikube delete || true

          # IMPORTANT:
          # - We DO NOT remove any pre-existing 'minikube' Docker network,
          #   because the Jenkins container/agent might be attached to it.
          # - We force Minikube to use our dedicated network to avoid route/subnet clashes.
          minikube start -p minikube \
            --driver=docker \
            --container-runtime=containerd \
            --kubernetes-version=stable \
            --docker-opt=network=${MK_DOCKER_NET} \
            --delete-on-failure \
            --force \
            --wait=all

          kubectl config current-context
          kubectl get nodes -o wide
        '''
      }
    }

    stage('Compute Tag') {
      steps {
        script {
          env.TAG   = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
          env.IMAGE = "${env.APP}:${env.TAG}"   // local tag; loaded into minikube
          echo "IMAGE=${env.IMAGE}"
        }
      }
    }

    stage('Build Docker Image (local)') {
      steps {
        dir(env.DOCKER_CTX) {
          sh '''
            set -euo pipefail
            docker build -t '"'"${IMAGE}"'"' .
          '''
        }
      }
    }

    stage('Load Image into Minikube') {
      steps {
        sh '''
          set -euo pipefail
          minikube -p minikube image load '"'"${IMAGE}"'"'
          # Optional: confirm it inside containerd on the node
          minikube -p minikube ssh -- "ctr -n=k8s.io images ls | grep ${APP} || true"
        '''
      }
    }

    stage('Apply Manifests & Rollout') {
      steps {
        sh """
          set -euo pipefail

          kubectl -n ${NS} apply -f ${MANIFEST_DIR}/deployment.yaml
          kubectl -n ${NS} apply -f ${MANIFEST_DIR}/service.yaml

          kubectl -n ${NS} set image deploy/${DEPLOY} ${CTR}=${IMAGE}

          kubectl -n ${NS} rollout status deploy/${DEPLOY} --timeout=180s

          kubectl -n ${NS} get deploy ${DEPLOY} -o wide
          kubectl -n ${NS} get pods -o wide
          kubectl -n ${NS} get svc
        """
      }
    }
  }

  post {
    always {
      echo "Pipeline finished (success or failure)."
    }
    failure {
      echo "Collecting Minikube & network logs for debuggingâ€¦"
      sh 'minikube -p minikube logs --file=logs.txt || true'
      archiveArtifacts artifacts: 'logs.txt', onlyIfSuccessful: false, allowEmptyArchive: true
      sh 'docker network ls || true'
      sh 'docker network inspect "${MK_DOCKER_NET}" || true'
    }
  }
}
