pipeline {
  agent any

  triggers {
    pollSCM('H/2 * * * *') // every 2 minutes
  }

  environment {
    NS          = 'default'
    APP         = 'mydjangoapp'
    DEPLOY      = 'django-deployment' // metadata.name in deployment.yaml
    CTR         = 'web'               // containers[].name in deployment.yaml
    DOCKER_CTX  = 'ps2'               // where your Dockerfile is
    MANIFEST_DIR= 'ps2'               // where deployment.yaml/service.yaml are (use '.' if at repo root)
  }

  stages {
    stage('Checkout') {
      steps {
        cleanWs()
        git branch: 'main', url: 'https://github.com/KevinAntoun/430-Tutorial'
      }
    }

    stage('Install minikube CLI (once per container)') {
      steps {
        sh '''
          set -e
          if ! command -v minikube >/dev/null 2>&1; then
            curl -fsSL https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 -o /usr/local/bin/minikube
            chmod +x /usr/local/bin/minikube
          fi
          minikube version || true
        '''
      }
    }

    stage('Compute Tag') {
      steps {
        script {
          env.TAG   = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
          env.IMAGE = "${env.APP}:${env.TAG}"   // local tag; we load into Minikube
          echo "IMAGE=${env.IMAGE}"
        }
      }
    }

    stage('Build Docker Image (local)') {
      steps {
        dir(env.DOCKER_CTX) {
          sh "docker build -t ${IMAGE} ."
        }
      }
    }

    stage('Load Image into Minikube') {
      steps {
        sh "minikube image load ${IMAGE}"
      }
    }

    stage('Apply Manifests & Rollout') {
      steps {
        sh """
          kubectl -n ${NS} apply -f ${MANIFEST_DIR}/deployment.yaml
          kubectl -n ${NS} apply -f ${MANIFEST_DIR}/service.yaml
          kubectl -n ${NS} set image deploy/${DEPLOY} ${CTR}=${IMAGE}
          kubectl -n ${NS} rollout status deploy/${DEPLOY} --timeout=180s
          kubectl -n ${NS} get deploy ${DEPLOY} -o wide
          kubectl -n ${NS} get pods -n ${NS} -o wide
        """
      }
    }
  }
}
