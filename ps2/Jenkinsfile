pipeline {
  agent any

  triggers {
    // poll every 2 minutes
    pollSCM('H/2 * * * *')
  }

  environment {
    NS            = 'default'
    APP           = 'mydjangoapp'
    DEPLOY        = 'django-deployment'   // metadata.name in deployment.yaml
    CTR           = 'django-container'                 // containers[].name in deployment.yaml
    DOCKER_CTX    = 'ps2'                 // path containing Dockerfile
    MANIFEST_DIR  = 'ps2'                 // path containing deployment.yaml/service.yaml

    // Persist cluster config/state across stages in this workspace
    MINIKUBE_HOME = "${WORKSPACE}/.minikube"
    KUBECONFIG    = "${WORKSPACE}/.kube/config"

    // Dedicated Docker network for Minikube
    MK_DOCKER_NET = 'minikube-net'
    MK_SUBNET     = '10.123.0.0/16'

    // Running Minikube in a container
    MINIKUBE_IN_A_CONTAINER = 'true'
  }

  options {
    timestamps()
  }

  stages {

    stage('Checkout') {
      steps {
        cleanWs()
        git branch: 'main', url: 'https://github.com/KevinAntoun/430-Tutorial'
      }
    }

    stage('Install CLIs (once)') {
      steps {
        sh '''
          set -euo pipefail
          # Install necessary tools if they are not present
          if ! command -v minikube >/dev/null 2>&1; then curl -fsSL https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 -o /usr/local/bin/minikube && chmod +x /usr/local/bin/minikube; fi
          if ! command -v kubectl >/dev/null 2>&1; then KVER="$(curl -fsSL https://dl.k8s.io/release/stable.txt)"; curl -fsSL "https://dl.k8s.io/release/${KVER}/bin/linux/amd64/kubectl" -o /usr/local/bin/kubectl && chmod +x /usr/local/bin/kubectl; fi
          if ! command -v socat >/dev/null 2>&1; then apt-get update -y && apt-get install -y --no-install-recommends socat; fi
          mkdir -p "${MINIKUBE_HOME}" "$(dirname "${KUBECONFIG}")"
        '''
      }
    }

    stage('Prepare dedicated Docker network for Minikube') {
      steps {
        sh '''
          set -euo pipefail
          if ! docker network inspect "${MK_DOCKER_NET}" >/dev/null 2>&1; then
            echo "Creating Docker network: ${MK_DOCKER_NET} (${MK_SUBNET})"
            docker network create --driver=bridge --subnet="${MK_SUBNET}" "${MK_DOCKER_NET}"
          fi
        '''
      }
    }

    stage('Start or Re-use Minikube (with localhost bridge)') {
      steps {
        sh '''
          set -euo pipefail

          # --- Start the Robust Port Forwarding Bridge ---
          cat > /tmp/minikube_port_bridge.sh <<'EOSH'
#!/usr/bin/env bash
set -euo pipefail
declare -A BRIDGED_PORTS
while true; do
  PORT_MAPS=$(docker port minikube 2>/dev/null || true)
  if [[ -n "$PORT_MAPS" ]]; then
    while read -r line; do
      HOST_PORT=$(echo "$line" | awk -F: '{print $2}')
      if [[ -n "$HOST_PORT" && -z "${BRIDGED_PORTS[$HOST_PORT]:-}" ]]; then
        nohup socat TCP-LISTEN:${HOST_PORT},fork,reuseaddr TCP:host.docker.internal:${HOST_PORT} >/dev/null 2>&1 &
        BRIDGED_PORTS[$HOST_PORT]=true
        echo "[BRIDGE] Forwarding container localhost:${HOST_PORT} -> host.docker.internal:${HOST_PORT}"
      fi
    done <<< "$PORT_MAPS"
  fi
  sleep 2
done
EOSH
          chmod +x /tmp/minikube_port_bridge.sh
          nohup /tmp/minikube_port_bridge.sh >/tmp/port-bridge.log 2>&1 &
          sleep 2 # Give the bridge a moment to start its loop

          # --- Check if Minikube is already running ---
          if minikube status -p minikube | grep -q "Running"; then
            echo "Reusing existing, running Minikube cluster."
            minikube -p minikube update-context
          else
            echo "No running Minikube found. Starting a new cluster..."
            
            minikube delete -p minikube || true
            rm -rf "${MINIKUBE_HOME}/cache/preloaded-tarball"

            minikube start -p minikube \\
              --driver=docker \\
              --container-runtime=containerd \\
              --kubernetes-version=v1.30.0 \\
              --cpus=2 --memory=4096 \\
              --network="${MK_DOCKER_NET}" \\
              --delete-on-failure \\
              --wait=all \\
              --force \\
              -v=3 --alsologtostderr
          fi

          # Final verification to ensure the cluster is responsive
          echo "Verifying cluster connectivity..."
          kubectl config current-context
          kubectl get nodes -o wide
        '''
      }
    }

    stage('Compute Tag') {
      steps {
        script {
          env.TAG   = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
          env.IMAGE = "${env.APP}:${env.TAG}"
          echo "IMAGE=${env.IMAGE}"
        }
      }
    }

    stage('Build Docker Image (local)') {
      steps {
        dir(env.DOCKER_CTX) {
          sh 'docker build -t "${IMAGE}" .'
        }
      }
    }

    stage('Load Image into Minikube') {
      steps {
        sh 'minikube -p minikube image load "${IMAGE}"'
      }
    }

    stage('Apply Manifests & Rollout') {
      steps {
        sh """
          set -euo pipefail
          kubectl -n ${NS} apply -f ${MANIFEST_DIR}/deployment.yaml
          kubectl -n ${NS} apply -f ${MANIFEST_DIR}/service.yaml
          kubectl -n ${NS} set image deploy/${DEPLOY} ${CTR}=${IMAGE}
          kubectl -n ${NS} rollout status deploy/${DEPLOY} --timeout=180s
          kubectl -n ${NS} get deploy,pods,svc -o wide
        """
      }
    }
  }

  post {
    always {
      echo 'Pipeline finished. Cleaning up port bridge...'
      sh 'pkill -f minikube_port_bridge.sh || true'
      sh 'pkill -f "socat TCP-LISTEN" || true'
    }
    failure {
      echo 'Collecting Minikube & network logs for debuggingâ€¦'
      sh 'minikube -p minikube logs --file=logs.txt || true'
      archiveArtifacts artifacts: 'logs.txt', allowEmptyArchive: true
      sh 'docker network ls || true'
      sh 'docker network inspect "${MK_DOCKER_NET}" || true'
      sh 'echo "[BRIDGE LOGS]"; cat /tmp/port-bridge.log || true'
    }
  }
}