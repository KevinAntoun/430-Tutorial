pipeline {
  agent any

  triggers {
    // poll every 2 minutes
    pollSCM('H/2 * * * *')
  }

  environment {
    NS            = 'default'
    APP           = 'mydjangoapp'
    DEPLOY        = 'django-deployment'   // metadata.name in deployment.yaml
    CTR           = 'web'                 // containers[].name in deployment.yaml
    DOCKER_CTX    = 'ps2'                 // path containing Dockerfile
    MANIFEST_DIR  = 'ps2'                 // path containing deployment.yaml/service.yaml

    // Persist cluster config/state across stages in this workspace
    MINIKUBE_HOME = "${WORKSPACE}/.minikube"
    KUBECONFIG    = "${WORKSPACE}/.kube/config"
  }

  options {
    // show full command logs
    ansiColor('xterm')
    timestamps()
  }

  stages {
    stage('Checkout') {
      steps {
        cleanWs()
        git branch: 'main', url: 'https://github.com/KevinAntoun/430-Tutorial'
      }
    }

    stage('Install CLIs (once)') {
      steps {
        sh '''
          set -euo pipefail

          # --- Minikube ---
          if ! command -v minikube >/dev/null 2>&1; then
            curl -fsSL https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 -o /usr/local/bin/minikube
            chmod +x /usr/local/bin/minikube
          fi
          minikube version || true

          # --- kubectl ---
          if ! command -v kubectl >/dev/null 2>&1; then
            KVER="$(curl -fsSL https://dl.k8s.io/release/stable.txt)"
            curl -fsSL "https://dl.k8s.io/release/${KVER}/bin/linux/amd64/kubectl" -o /usr/local/bin/kubectl
            chmod +x /usr/local/bin/kubectl
          fi

          # ensure dirs for kube/minikube live under workspace
          mkdir -p "${MINIKUBE_HOME}" "$(dirname "${KUBECONFIG}")"
        '''
      }
    }

    stage('Start Minikube (once per workspace)') {
      steps {
        sh '''
          set -euo pipefail

          # If previous profile is broken, uncomment next line to reset:
          # minikube -p minikube delete || true

          if ! minikube -p minikube status >/dev/null 2>&1; then
            minikube start -p minikube \
              --driver=docker \
              --container-runtime=containerd \
              --kubernetes-version=stable \
              --force \
              --wait=all
          fi

          # Sanity
          kubectl config current-context
          kubectl get nodes -o wide
        '''
      }
    }

    stage('Compute Tag') {
      steps {
        script {
          env.TAG   = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
          env.IMAGE = "${env.APP}:${env.TAG}"   // local tag; loaded into minikube
          echo "IMAGE=${env.IMAGE}"
        }
      }
    }

    stage('Build Docker Image (local)') {
      steps {
        dir(env.DOCKER_CTX) {
          sh '''
            set -euo pipefail
            # Build with legacy builder or BuildKit; legacy is fine for CI here
            docker build -t '"'"${IMAGE}"'"' .
          '''
        }
      }
    }

    stage('Load Image into Minikube') {
      steps {
        sh '''
          set -euo pipefail
          # Load the locally built image into the Minikube node runtime
          minikube -p minikube image load '"'"${IMAGE}"'"'
          # Optional: verify it reached containerd inside the node
          minikube -p minikube ssh -- "ctr -n=k8s.io images ls | grep ${APP} || true"
        '''
      }
    }

    stage('Apply Manifests & Rollout') {
      steps {
        sh """
          set -euo pipefail

          # Apply k8s YAMLs
          kubectl -n ${NS} apply -f ${MANIFEST_DIR}/deployment.yaml
          kubectl -n ${NS} apply -f ${MANIFEST_DIR}/service.yaml

          # Make sure deployment points to our freshly loaded tag
          kubectl -n ${NS} set image deploy/${DEPLOY} ${CTR}=${IMAGE}

          # Wait for rollout
          kubectl -n ${NS} rollout status deploy/${DEPLOY} --timeout=180s

          # Debug info
          kubectl -n ${NS} get deploy ${DEPLOY} -o wide
          kubectl -n ${NS} get pods -o wide
          kubectl -n ${NS} get svc
        """
      }
    }
  }

  post {
    always {
      echo "Pipeline finished (success or failure)."
    }
    failure {
      echo "Diagnose with: minikube logs --file=logs.txt"
      sh 'minikube -p minikube logs --file=logs.txt || true'
      archiveArtifacts artifacts: 'logs.txt', onlyIfSuccessful: false, allowEmptyArchive: true
    }
  }
}
