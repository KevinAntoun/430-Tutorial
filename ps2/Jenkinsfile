pipeline {
  agent any

  triggers {
    // poll every 2 minutes
    pollSCM('H/2 * * * *')
  }

  environment {
    NS            = 'default'
    APP           = 'mydjangoapp'
    DEPLOY        = 'django-deployment'   // metadata.name in deployment.yaml
    CTR           = 'web'                 // containers[].name in deployment.yaml
    DOCKER_CTX    = 'ps2'                 // path containing Dockerfile
    MANIFEST_DIR  = 'ps2'                 // path containing deployment.yaml/service.yaml

    // Persist cluster config/state across stages in this workspace
    MINIKUBE_HOME = "${WORKSPACE}/.minikube"
    KUBECONFIG    = "${WORKSPACE}/.kube/config"

    // Dedicated Docker network for Minikube
    MK_DOCKER_NET = 'minikube-net'
    MK_SUBNET     = '10.123.0.0/16'

    // Running Minikube in a container
    MINIKUBE_IN_A_CONTAINER = 'true'
  }

  options {
    timestamps()
  }

  stages {

    stage('Checkout') {
      steps {
        cleanWs()
        git branch: 'main', url: 'https://github.com/KevinAntoun/430-Tutorial'
      }
    }

    stage('Install CLIs (once)') {
      steps {
        sh '''
          set -euo pipefail

          # --- Minikube ---
          if ! command -v minikube >/dev/null 2>&1; then
            curl -fsSL https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 -o /usr/local/bin/minikube
            chmod +x /usr/local/bin/minikube
          fi
          minikube version || true

          # --- kubectl ---
          if ! command -v kubectl >/dev/null 2>&1; then
            KVER="$(curl -fsSL https://dl.k8s.io/release/stable.txt)"
            curl -fsSL "https://dl.k8s.io/release/${KVER}/bin/linux/amd64/kubectl" -o /usr/local/bin/kubectl
            chmod +x /usr/local/bin/kubectl
          fi

          # ensure dirs for kube/minikube live under workspace
          mkdir -p "${MINIKUBE_HOME}" "$(dirname "${KUBECONFIG}")"
        '''
      }
    }

    stage('Prepare dedicated Docker network for Minikube') {
      steps {
        sh '''
          set -euo pipefail

          if docker network inspect "${MK_DOCKER_NET}" >/dev/null 2>&1; then
            echo "Using existing Docker network: ${MK_DOCKER_NET}"
          else
            echo "Creating Docker network: ${MK_DOCKER_NET} (${MK_SUBNET})"
            if ! docker network create --driver=bridge --subnet="${MK_SUBNET}" "${MK_DOCKER_NET}"; then
              echo "ERROR: Failed to create ${MK_DOCKER_NET} on ${MK_SUBNET} (likely subnet conflict)."
              echo "Existing networks:"
              docker network ls
              echo "Details:"
              docker network ls -q | xargs -r docker network inspect -f '{{.Name}} {{range .IPAM.Config}}{{.Subnet}}{{end}}'
              exit 2
            fi
          fi

          docker network inspect "${MK_DOCKER_NET}" -f '{{.Name}} {{range .IPAM.Config}}{{.Subnet}}{{end}}'
        '''
      }
    }

    stage('Start Minikube') {
      steps {
        sh '''
          set -euo pipefail

          # Reuse existing Minikube if it's already running, otherwise start it
          if minikube -p minikube status >/dev/null 2>&1; then
            echo "Reusing existing and running Minikube cluster."
            # Ensure context is up-to-date
            minikube -p minikube update-context
          else
            echo "No existing Minikube cluster found or it is not running; starting a new one..."
            minikube start -p minikube \\
              --driver=docker \\
              --container-runtime=containerd \\
              --kubernetes-version=v1.30.0 \\
              --cpus=2 --memory=4096 \\
              --network="${MK_DOCKER_NET}" \\
              --delete-on-failure \\
              --wait=all \\
              --force \\
              --listen-address=0.0.0.0 \\
              -v=3 --alsologtostderr
          fi
          
          # Explicitly wait for the API server to be reachable before proceeding
          echo "Waiting for Kubernetes API server to be ready..."
          ATTEMPTS=0
          MAX_ATTEMPTS=60
          until kubectl get nodes &> /dev/null; do
            if [ $ATTEMPTS -eq $MAX_ATTEMPTS ]; then
              echo "API server did not become ready in time."
              exit 1
            fi
            echo "Still waiting for API server... ($((ATTEMPTS+1))/${MAX_ATTEMPTS})"
            ATTEMPTS=$((ATTEMPTS+1))
            sleep 2
          done
          echo "Kubernetes API server is ready."

          kubectl config current-context
          kubectl get nodes -o wide
        '''
      }
    }

    stage('Compute Tag') {
      steps {
        script {
          env.TAG   = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
          env.IMAGE = "${env.APP}:${env.TAG}"   // local tag; loaded into minikube
          echo "IMAGE=${env.IMAGE}"
        }
      }
    }

    stage('Build Docker Image (local)') {
      steps {
        dir(env.DOCKER_CTX) {
          sh '''
            set -euo pipefail
            docker build -t "'"${IMAGE}"'" .
          '''
        }
      }
    }

    stage('Load Image into Minikube') {
      steps {
        sh '''
          set -euo pipefail
          minikube -p minikube image load "'"${IMAGE}"'"
          # confirm it inside containerd on the node
          minikube -p minikube ssh -- "ctr -n=k8s.io images ls | grep ${APP} || true"
        '''
      }
    }

    stage('Apply Manifests & Rollout') {
      steps {
        sh """
          set -euo pipefail

          kubectl -n ${NS} apply -f ${MANIFEST_DIR}/deployment.yaml
          kubectl -n ${NS} apply -f ${MANIFEST_DIR}/service.yaml

          kubectl -n ${NS} set image deploy/${DEPLOY} ${CTR}=${IMAGE}

          kubectl -n ${NS} rollout status deploy/${DEPLOY} --timeout=180s

          kubectl -n ${NS} get deploy ${DEPLOY} -o wide
          kubectl -n ${NS} get pods -o wide
          kubectl -n ${NS} get svc
        """
      }
    }
  }

  post {
    always {
      echo 'Pipeline finished (success or failure).'
    }
    failure {
      echo 'Collecting Minikube & network logs for debuggingâ€¦'
      sh 'minikube -p minikube logs --file=logs.txt || true'
      archiveArtifacts artifacts: 'logs.txt', onlyIfSuccessful: false, allowEmptyArchive: true
      sh 'docker network ls || true'
      sh 'docker network inspect "${MK_DOCKER_NET}" || true'
    }
  }
}